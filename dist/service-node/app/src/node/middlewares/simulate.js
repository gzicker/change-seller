"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simulateOrder = void 0;
async function simulateOrder(_, { data }, { clients: { checkoutExternal, market, decrypClient } }) {
    var _a;
    const items = [];
    data.items.forEach((element) => items.push(values(element)));
    function values(element) {
        const item = {
            id: element.id,
            quantity: element.quantity,
            seller: data.seller,
        };
        return item;
    }
    const list = [];
    const listLogistics = [];
    const index = [];
    const geoCoordinates = [];
    if (data.geoCoordinates != null) {
        const arrayDeCadenas = data.geoCoordinates.split(',');
        arrayDeCadenas.forEach((element) => {
            let a = element.replace('[', '');
            a = a.replace(']', '');
            geoCoordinates.push(a);
        });
    }
    const mket = await market.getMarket();
    let account = (mket === null || mket === void 0 ? void 0 : mket.haveParentAccount) ? mket === null || mket === void 0 ? void 0 : mket.parentAccountName : mket === null || mket === void 0 ? void 0 : mket.accountName;
    const getEmail = async () => {
        var _a, _b;
        const clientEmail = await decrypClient.decrypEmail(`?alias=${(_a = data === null || data === void 0 ? void 0 : data.clientProfileData) === null || _a === void 0 ? void 0 : _a.email}`, account);
        const { email } = clientEmail !== null && clientEmail !== void 0 ? clientEmail : await decrypClient.decrypEmail(`?alias=${(_b = data === null || data === void 0 ? void 0 : data.clientProfileData) === null || _b === void 0 ? void 0 : _b.email}`, data.sellerOrder);
        const _email = await decrypClient.decrypEmail(`?alias=${email}`, account);
        const userEmail = _email === null || _email === void 0 ? void 0 : _email.email;
        return userEmail !== null && userEmail !== void 0 ? userEmail : '';
    };
    const email = await getEmail();
    const request = {
        items,
        paymentData: {
            payments: [{
                    paymentSystem: data.paymentData
                }]
        },
        postalCode: data.postalCode,
        geoCoordinates,
        country: data.country,
        clientProfileData: { ...data === null || data === void 0 ? void 0 : data.clientProfileData, email }
    };
    const response = await checkoutExternal.simulation(request, account);
    let itemIndex = 0;
    response.items.forEach((element) => {
        if (element.availability == 'available') {
            element.itemIndex = itemIndex;
            itemIndex++;
            index.push(element.requestIndex);
            list.push(element);
        }
    });
    let itemIndexL = 0;
    (_a = response.logisticsInfo) === null || _a === void 0 ? void 0 : _a.forEach((element) => {
        if (index.includes(element.itemIndex)) {
            element.itemIndex = itemIndexL;
            itemIndexL++;
            listLogistics.push(element);
        }
    });
    const rta = {
        items: await list,
        paymentData: (await response).paymentData,
        postalCode: (await response).postalCode,
        country: (await response).country,
        messages: (await response).messages,
        logisticsInfo: await listLogistics,
        purchaseConditions: (await response).purchaseConditions,
        totals: (await response).totals,
    };
    return rta;
}
exports.simulateOrder = simulateOrder;
//# sourceMappingURL=data:application/json;base64,