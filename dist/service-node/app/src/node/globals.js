"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@vtex/api");
if (!global.metrics) {
    console.error('No global.metrics at require time');
    global.metrics = new api_1.MetricsAccumulator();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9ub2RlL2dsb2JhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBc0U7QUFFdEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7SUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFBO0lBQ2xELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSx3QkFBa0IsRUFBRSxDQUFBO0NBQzFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU9Db250ZXh0LCBNZXRyaWNzQWNjdW11bGF0b3IsIFNlZ21lbnREYXRhIH0gZnJvbSAnQHZ0ZXgvYXBpJ1xuXG5pZiAoIWdsb2JhbC5tZXRyaWNzKSB7XG4gIGNvbnNvbGUuZXJyb3IoJ05vIGdsb2JhbC5tZXRyaWNzIGF0IHJlcXVpcmUgdGltZScpXG4gIGdsb2JhbC5tZXRyaWNzID0gbmV3IE1ldHJpY3NBY2N1bXVsYXRvcigpXG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIEN1c3RvbUlPQ29udGV4dCBleHRlbmRzIElPQ29udGV4dCB7XG4gICAgY3VycmVudFByb2ZpbGU6IEN1cnJlbnRQcm9maWxlXG4gICAgc2VnbWVudD86IFNlZ21lbnREYXRhXG4gICAgb3JkZXJGb3JtSWQ/OiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBVc2VyQWRkcmVzcyB7XG4gICAgaWQ6IHN0cmluZ1xuICAgIGFkZHJlc3NOYW1lOiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBVc2VyUHJvZmlsZSB7XG4gICAgaWQ6IHN0cmluZ1xuICB9XG5cbiAgaW50ZXJmYWNlIEN1cnJlbnRQcm9maWxlIHtcbiAgICBjbGllbnRfaWQ6IHN0cmluZ1xuICB9XG5cbiAgaW50ZXJmYWNlIEl0ZW0ge1xuICAgIHRodW1iOiBzdHJpbmdcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBocmVmOiBzdHJpbmdcbiAgICBjcml0ZXJpYTogc3RyaW5nXG4gICAgc2x1Zzogc3RyaW5nXG4gIH1cblxuICBpbnRlcmZhY2UgUGVyc29uYWxQcmVmZXJlbmNlcyB7XG4gICAgaXNOZXdzbGV0dGVyT3B0SW4/OiAnVHJ1ZScgfCAnRmFsc2UnXG4gIH1cblxuICBpbnRlcmZhY2UgUHJvZmlsZUN1c3RvbUZpZWxkIHtcbiAgICBrZXk6IHN0cmluZ1xuICAgIHZhbHVlOiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBSZXNwb25zZUNsaWVudCB7XG4gICAgdXNlclByb2ZpbGVJZDogc3RyaW5nXG4gICAgdXNlclByb2ZpbGU6IFVzZXJQcm9maWxlXG4gIH1cblxuICBpbnRlcmZhY2UgVXNlclByb2ZpbGUge1xuICAgIGVtYWlsOiBzdHJpbmdcbiAgICBmaXJzdE5hbWU6IHN0cmluZ1xuICAgIGxhc3ROYW1lOiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBSZXF1ZXN0UGxhY2VPcmRlciB7XG4gICAgaXRlbXM6IFtJdGVtc11cbiAgICBjbGllbnRQcm9maWxlRGF0YTogQ2xpZW50UHJvZmlsZURhdGFcbiAgICBzaGlwcGluZ0RhdGE6IFNoaXBwaW5nRGF0YVxuICAgIHBheW1lbnREYXRhOiBbUGF5bWVudERhdGFdXG4gICAgb3BlblRleHRGaWVsZDogc3RyaW5nXG4gIH1cblxuICBpbnRlcmZhY2UgUGF5bWVudERhdGEge1xuICAgIGluc3RhbGxtZW50T3B0aW9uczogW0luc3RhbGxtZW50T3B0aW9uc11cbiAgICBwYXltZW50U3lzdGVtczogW1BheW1lbnRTeXN0ZW1zXVxuICB9XG5cbiAgaW50ZXJmYWNlIEluc3RhbGxtZW50T3B0aW9ucyB7XG4gICAgcGF5bWVudFN5c3RlbTogc3RyaW5nXG4gICAgcGF5bWVudE5hbWU6IHN0cmluZ1xuICAgIHBheW1lbnRHcm91cE5hbWU6IHN0cmluZ1xuICAgIHZhbHVlOiBudW1iZXJcbiAgICBpbnN0YWxsbWVudHM6IFtJbnN0YWxsbWVudHNdXG4gIH1cblxuICBpbnRlcmZhY2UgSW5zdGFsbG1lbnRzIHtcbiAgICBjb3VudDogbnVtYmVyXG4gICAgaGFzSW50ZXJlc3RSYXRlOiBCb29sZWFuXG4gICAgdmFsdWU6IG51bWJlclxuICAgIHRvdGFsOiBudW1iZXJcbiAgICBzZWxsZXJNZXJjaGFudEluc3RhbGxtZW50czogW1NlbGxlck1lcmNoYW50SW5zdGFsbG1lbnRzXVxuICB9XG5cbiAgaW50ZXJmYWNlIFNlbGxlck1lcmNoYW50SW5zdGFsbG1lbnRzIHtcbiAgICBpZDogc3RyaW5nXG4gICAgY291bnQ6IG51bWJlclxuICAgIGhhc0ludGVyZXN0UmF0ZTogQm9vbGVhblxuICAgIGludGVyZXN0UmF0ZTogbnVtYmVyXG4gICAgdmFsdWU6IG51bWJlclxuICAgIHRvdGFsOiBudW1iZXJcbiAgfVxuXG4gIGludGVyZmFjZSBQYXltZW50U3lzdGVtcyB7XG4gICAgaW5zdGFsbG1lbnRPcHRpb25zOiBbSW5zdGFsbG1lbnRPcHRpb25zXVxuICAgIHBheW1lbnRTeXN0ZW1zOiBbUGF5bWVudFN5c3RlbXNdXG4gIH1cblxuICBpbnRlcmZhY2UgSXRlbXMge1xuICAgIGlkOiBzdHJpbmdcbiAgICBxdWFudGl0eTogbnVtYmVyXG4gICAgc2VsbGVyOiBzdHJpbmdcbiAgICBwcmljZTogbnVtYmVyXG4gIH1cblxuICBpbnRlcmZhY2UgQ2xpZW50UHJvZmlsZURhdGEge1xuICAgIGVtYWlsOiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBTaGlwcGluZ0RhdGEge1xuICAgIGFkZHJlc3M6IEFkZHJlc3NcbiAgICBsb2dpc3RpY3NJbmZvOiBhbnlcbiAgfVxuXG4gIGludGVyZmFjZSBBZGRyZXNzIHt9XG5cbiAgaW50ZXJmYWNlIFNrdSB7XG4gICAgaWQ6IHN0cmluZ1xuICAgIG5hbWVDb21wbGV0ZTogc3RyaW5nXG4gICAgYWx0ZXJuYXRlSWRzOiBbQWx0ZXJuYXRlSWRzXVxuICB9XG5cbiAgaW50ZXJmYWNlIEFsdGVybmF0ZUlkcyB7XG4gICAgZWFuOiBzdHJpbmdcbiAgICByZWZJZDogc3RyaW5nXG4gIH1cblxuICBpbnRlcmZhY2UgTG9naXN0aWNzSW5mbyB7XG4gICAgaXRlbUluZGV4OiBudW1iZXJcbiAgICBzZWxlY3RlZFNsYTogc3RyaW5nXG4gICAgcHJpY2U6IG51bWJlclxuICB9XG5cbiAgaW50ZXJmYWNlIFBheW1lbnRzIHtcbiAgICBwYXltZW50U3lzdGVtOiBzdHJpbmdcbiAgICByZWZlcmVuY2VWYWx1ZTogbnVtYmVyXG4gICAgdmFsdWU6IG51bWJlclxuICAgIGluc3RhbGxtZW50czogbnVtYmVyXG4gIH1cblxuICBpbnRlcmZhY2UgUmVzcG9uc2VQbGFjZU9yZGVyIHtcbiAgICBvcmRlckZvcm06IE9yZGVyRm9ybVxuICAgIHRyYW5zYWN0aW9uRGF0YTogVHJhbnNhY3Rpb25EYXRhXG4gICAgb3JkZXJzOiBbT3JkZXJzXVxuICAgIGVycm9yOiBFcnJvclxuICB9XG5cbiAgaW50ZXJmYWNlIE9yZGVyRm9ybSB7XG4gICAgb3JkZXJGb3JtSWQ6IHN0cmluZ1xuICAgIG1lc3NhZ2VzOiBbTWVzc2FnZXNdXG4gIH1cblxuICBpbnRlcmZhY2UgTWVzc2FnZXMge1xuICAgIHRleHQ6IHN0cmluZ1xuICAgIHN0YXR1czogc3RyaW5nXG4gIH1cblxuICBpbnRlcmZhY2UgVHJhbnNhY3Rpb25EYXRhIHtcbiAgICBtZXJjaGFudFRyYW5zYWN0aW9uczogW01lcmNoYW50VHJhbnNhY3Rpb25zXVxuICAgIHJlY2VpdmVyVXJpOiBzdHJpbmdcbiAgICBnYXRld2F5Q2FsbGJhY2tUZW1wbGF0ZVBhdGg6IHN0cmluZ1xuICB9XG5cbiAgaW50ZXJmYWNlIE1lcmNoYW50VHJhbnNhY3Rpb25zIHtcbiAgICBpZDogc3RyaW5nXG4gICAgdHJhbnNhY3Rpb25JZDogc3RyaW5nXG4gICAgbWVyY2hhbnROYW1lOiBzdHJpbmdcbiAgICBwYXltZW50czogW1BheW1lbnRzXVxuICB9XG5cbiAgaW50ZXJmYWNlIFBheW1lbnRzIHtcbiAgICBwYXltZW50U3lzdGVtOiBzdHJpbmdcbiAgICB2YWx1ZTogbnVtYmVyXG4gIH1cblxuICBpbnRlcmZhY2UgT3JkZXJzIHtcbiAgICBvcmRlcklkOiBzdHJpbmdcbiAgICBvcmRlckdyb3VwOiBzdHJpbmdcbiAgICBzZWxsZXJPcmRlcklkOiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBSZXF1ZXN0Q3JlYXRlVHJhbnNhY3Rpb24ge1xuICAgIHBheW1lbnRTeXN0ZW06IFN0cmluZ1xuICAgIGluc3RhbGxtZW50czogU3RyaW5nXG4gICAgdmFsdWU6IG51bWJlclxuICAgIHJlZmVyZW5jZVZhbHVlOiBudW1iZXJcbiAgICBmaWVsZHM6IEZpZWxkc1xuICAgIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvblxuICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nXG4gIH1cblxuICBpbnRlcmZhY2UgRmllbGRzIHtcbiAgICBhZGRyZXNzSWQ6IHN0cmluZ1xuICB9XG5cbiAgaW50ZXJmYWNlIFRyYW5zYWN0aW9uIHtcbiAgICBpZDogc3RyaW5nXG4gICAgbWVyY2hhbnROYW1lOiBzdHJpbmdcbiAgfVxuXG4gIGludGVyZmFjZSBSZXNwb25zZVRyYW5zYWN0aW9uIHtcbiAgICBpZDogc3RyaW5nXG4gICAgdHJhbnNhY3Rpb25JZDogc3RyaW5nXG4gICAgcmVmZXJlbmNlS2V5OiBzdHJpbmdcbiAgICBzdGF0dXM6IHN0cmluZ1xuICAgIHZhbHVlOiBudW1iZXJcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDaGFuZ2VPcmRlciB7XG4gICAgZXJyb3I6IEVycm9yXG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEVycm9yIHtcbiAgICBtZXNzYWdlOiBzdHJpbmdcbiAgfVxufVxuIl19