"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Catalog = void 0;
const api_1 = require("@vtex/api");
const seller_1 = require("../utils/seller");
const request_1 = require("../utils/request");
const baseURL = '/api/catalog';
const baseURLLegacy = '/api/catalog_system';
const routes = {
    productsAndSkus: (from, to) => `${baseURLLegacy}/pvt/products/GetProductAndSkuIds?_from=${from}&_to=${to}`,
    getCategoryById: (categoryId) => `${baseURL}/pvt/category/${categoryId}`,
    getSkuById: (skuId) => `${baseURL}/pvt/stockkeepingunit/${skuId}`,
    getSkuContext: (skuId) => `${baseURLLegacy}/pvt/sku/stockkeepingunitbyid/${skuId}`,
    changeNotification: (sellerId, skuId) => `${baseURLLegacy}/pvt/skuseller/changenotification/${sellerId}/${skuId}`,
    seller: (sellerId) => `${baseURLLegacy}/pvt/seller/${sellerId}`,
    sellerList: `${baseURLLegacy}/pvt/seller/list`,
    getBrandById: (brandId) => `${baseURLLegacy}/pvt/brand/${brandId}`,
};
class Catalog extends api_1.JanusClient {
    constructor(ctx, options) {
        super(ctx, {
            ...options,
        });
    }
    getCategoryById(categoryId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-getCategoryMetric';
        return this.http.get(routes.getCategoryById(categoryId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    getProductsAndSkus(from = 1, to = 20, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-getProductsAndSkus';
        return this.http.get(routes.productsAndSkus(from, to), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    getSkuById(skuId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-getSkuMetric';
        return this.http.get(routes.getSkuById(skuId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    getSkuContext(skuId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-getSkuContextMetric';
        return this.http.get(routes.getSkuContext(skuId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    changeNotification({ sellerId, sellerSkuId, authMethod = 'AUTH_TOKEN', }, tracingConfig) {
        const metric = 'catalog-changeNotification';
        return this.http.post(routes.changeNotification(sellerId, sellerSkuId), {}, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    createSeller(seller, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-createSeller';
        const sellerInfo = seller_1.checkSellerInformation(seller);
        return this.http.post(routes.seller(sellerInfo.SellerId), sellerInfo, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    getSellerList(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-getSellerList';
        return this.http.get(routes.sellerList, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    seller(id, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-seller';
        return this.http.get(routes.seller(id), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    getBrandById(brandId, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'catalog-getBrandMetric';
        return this.http.get(routes.getBrandById(brandId), request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
}
exports.Catalog = Catalog;
//# sourceMappingURL=data:application/json;base64,