"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Checkout = void 0;
const api_1 = require("@vtex/api");
const request_1 = require("../utils/request");
const request_keys_1 = require("../utils/request_keys");
const baseURL = '/api/checkout';
const routes = {
    addItem: (orderFormId, queryString) => `${baseURL}/pub/orderForm/${orderFormId}/items${queryString}`,
    cancelOrder: (orderFormId) => `${baseURL}/pub/orders/${orderFormId}/user-cancel-request`,
    orderFormCustomData: (orderFormId, appId, field) => `${baseURL}/pub/orderForm/${orderFormId}/customData/${appId}/${field}`,
    updateItems: (orderFormId) => `${baseURL}/pub/orderForm/${orderFormId}/items/update`,
    profile: (orderFormId) => `${baseURL}/pub/orderForm/${orderFormId}/profile`,
    attachmentsData: (orderFormId, field) => `${baseURL}/pub/orderForm/${orderFormId}/attachments/${field}`,
    assemblyOptions: (orderFormId, itemId, assemblyOptionsId) => `${baseURL}/pub/orderForm/${orderFormId}/items/${itemId}/assemblyOptions/${assemblyOptionsId}`,
    checkin: (orderFormId) => `${baseURL}/pub/orderForm/${orderFormId}/checkIn`,
    orderForm: (orderFormId) => `${baseURL}/pub/orderForm/${orderFormId !== null && orderFormId !== void 0 ? orderFormId : ''}`,
    orders: `${baseURL}/pub/orders`,
    simulation: () => `${baseURL}/pub/orderForms/simulation`,
    changeToAnonymousUser: (orderFormId) => `/checkout/changeToAnonymousUser/${orderFormId}`,
    orderFormConfiguration: `${baseURL}/pvt/configuration/orderForm`,
    singleCustomData: (orderFormId, appId, appFieldName) => `${baseURL}/pub/orderForm/${orderFormId}/customData/${appId}/${appFieldName}`,
    clientProfile: (email) => `http://portal.vtexcommercestable.com.br${baseURL}/pub/profiles?email=${email}`,
    createTransaction: (account, transactionId) => `https://${account}.vtexpayments.com.br/api/pvt/transactions/${transactionId}/payments`,
};
class Checkout extends api_1.JanusClient {
    constructor(ctx, options) {
        super(ctx, {
            ...options,
        });
    }
    getOrderFormConfiguration(authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'checkout-getOrderFormConfiguration';
        return this.http.get(routes.orderFormConfiguration, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    setOrderFormConfiguration(body, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'checkout-setOrderFormConfiguration';
        return this.http.post(routes.orderFormConfiguration, body, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    setSingleCustomData(orderFormId, customData, authMethod = 'AUTH_TOKEN', tracingConfig) {
        const metric = 'checkout-setSingleCustomData';
        const { appId, appFieldName, value } = customData;
        return this.http.put(routes.singleCustomData(orderFormId, appId, appFieldName), { value }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    addItem(orderFormId, items, queryString = '', authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-addItem';
        return this.http.post(routes.addItem(orderFormId, queryString), { orderItems: items }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    cancelOrder(orderFormId, reason, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-cancelOrder';
        return this.http.post(routes.cancelOrder(orderFormId), { reason }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    setOrderFormCustomData(orderFormId, appId, field, value, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-setOrderFormCustomData';
        return this.http.put(routes.orderFormCustomData(orderFormId, appId, field), { value }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    updateItems(orderFormId, orderItems, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateItems';
        return this.http.post(routes.updateItems(orderFormId), { orderItems }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    updateOrderFormPayment(orderFormId, payments, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormPayment';
        return this.http.post(routes.attachmentsData(orderFormId, 'paymentData'), { payments }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    updateOrderFormProfile(orderFormId, fields, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormProfile';
        return this.http.post(routes.attachmentsData(orderFormId, 'clientProfileData'), fields, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    updateOrderFormShipping(orderFormId, shippingAddress, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormShipping';
        this.http.post(routes.attachmentsData(orderFormId, 'shippingData'), shippingAddress, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    updateOrderFormMarketingData(orderFormId, marketingData, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormMarketingData';
        return this.http.post(routes.attachmentsData(orderFormId, 'marketingData'), marketingData, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    updateOrderFormClientPreferencesData(orderFormId, clientPreferencesData, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormClientPreferencesData';
        // The API default value of `optinNewsLetter` is `null`, but it doesn't accept a POST with its value as `null`
        const filteredClientPreferencesData = clientPreferencesData.optinNewsLetter === null
            ? { locale: clientPreferencesData.locale }
            : clientPreferencesData;
        return this.http.post(routes.attachmentsData(orderFormId, 'clientPreferencesData'), filteredClientPreferencesData, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    addAssemblyOptions(orderFormId, itemId, assemblyOptionsId, body, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-addAssemblyOptions';
        return this.http.post(routes.assemblyOptions(orderFormId, itemId, assemblyOptionsId), body, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    async removeAssemblyOptions(orderFormId, itemId, assemblyOptionsId, body, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-removeAssemblyOptions';
        return this.http.delete(routes.assemblyOptions(orderFormId, itemId, assemblyOptionsId), {
            ...request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig),
            data: body,
        });
    }
    // eslint-disable-next-line max-params
    updateOrderFormCheckin(orderFormId, checkinPayload, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormCheckin';
        return this.http.post(routes.checkin(orderFormId), checkinPayload, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    orderForm(orderFormId, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-orderForm';
        return this.http.post(routes.orderForm(orderFormId), { expectedOrderFormSections: ['items'] }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    orderFormRaw(authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-orderForm';
        return this.http.post(routes.orderForm(), { expectedOrderFormSections: ['items'] }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    newOrderForm(orderFormId, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-newOrderForm';
        return this.http.post(routes.orderForm(orderFormId), undefined, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    orders(authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-orders';
        return this.http.get(routes.orders, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    setNewOrder(order, authMethod = 'ADMIN_TOKEN', tracingConfig) {
        const metric = 'checkout-orders';
        return this.http.put(routes.orders, order, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    simulation(simulation, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-simulation';
        return this.http.post(routes.simulation(), simulation, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
    // eslint-disable-next-line max-params
    clientProfile(email, mket) {
        return this.http.get(routes.clientProfile(email), request_keys_1.getRequestConfigKey(mket));
    }
    // eslint-disable-next-line max-params
    updateOrderFormIgnoreProfile(orderFormId, ignoreProfileData, authMethod = 'STORE_TOKEN', tracingConfig) {
        const metric = 'checkout-updateOrderFormIgnoreProfile';
        return this.http.patch(routes.profile(orderFormId), { ignoreProfileData }, request_1.getRequestConfig(this.context, authMethod, metric, tracingConfig));
    }
}
exports.Checkout = Checkout;
//# sourceMappingURL=data:application/json;base64,